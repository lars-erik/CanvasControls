<!DOCTYPE html>
<html>
<head>
	<title>CombinationSandbox</title>
	
	<script src="Scripts/class.js" type="text/javascript"></script>
    <script src="Scripts/jquery-1.7.1.min.js" type="text/javascript"></script>
    <script src="Scripts/jquery-mousewheel-3.0.6/jquery.mousewheel.js" type="text/javascript"></script>
	<script src="Scripts/canvascontrols.js" type="text/javascript"></script>
	<script src="Scripts/canvascontrols.observable.js" type="text/javascript"></script>
	<script src="Scripts/canvascontrols.shape.js" type="text/javascript"></script>
	<script src="Scripts/canvascontrols.compositeshape.js" type="text/javascript"></script>
	<script src="Scripts/canvascontrols.canvasview.js" type="text/javascript"></script>
	<script src="Scripts/canvascontrols.dragging.js" type="text/javascript"></script>
    <script src="Scripts/canvascontrols.timeline.tree.js" type="text/javascript"></script>
    <script src="Scripts/canvascontrols.period.js" type="text/javascript"></script>
    <script src="Scripts/canvascontrols.markers.js" type="text/javascript"></script>
    <script src="Scripts/canvascontrols.timeline.js" type="text/javascript"></script>
    <script src="Scripts/canvascontrols.timelineboard.js" type="text/javascript"></script>

	<style type="text/css">
			
	.menu {
		position: absolute;
		width: 100px;
		height: 100px;
		border: 1px solid black;
		background-color: #ECECEC;
		display: none;
	}
	.wrapper {
		position: relative;
	}
	.container 
	{
		position: absolute;
		left: 10px;
		top: 10px;
		right: 10px;
		height: 500px;
		background-color: #EFEFEF;
		border: 1px solid black;
	}
	
	.timeline
	{
		position: absolute;
		width: 100%;
		height: 45px;
	    left: 200px;
	    border-bottom: 1px solid #000;
	    border-left: 1px solid #000;
	}
	.timelineMarkers
	{
		position: absolute;
		width: 100%;
		height: 45px;
	    left: 200px;
	    
	}
	
	.board
	{
		position: absolute;
	    width: 100%;
		left: 200px;
		top: 0px;
	    border-bottom: 1px solid #000;
	    border-left: 1px solid #000;
	}
	
	.tree {
		position: absolute;
		left: 0px;
		top: 0px;
		width: 200px;
	}
	.spacer {
		position: absolute;
		left: 0px;
		top: 0px;
		width: 200px;
	}
	.boardContainer {
		position: absolute;
		width: 100%;
		left: 0px;
		top: 45px;
		height: 400px;
		overflow-y: auto;
		overflow-x: hidden;
	}
	.topContainer {
		position: absolute;
		width: 100%;
		left: 0px;
		top: 0px;
		height: 300px;
		overflow-y: auto;
		overflow-x: hidden;
	}
	</style>
</head>
    <body>
        
            <div class="container">
                <div id="topContainer" class="topContainer">
                    <div class="spacer">Svensker er mennesker</div>
                    <canvas id="timeline" class="timeline"></canvas>
                    
                
                </div>
                <div id="boardContainer" class="boardContainer">
                    <canvas id="tree" class="tree" width="200"></canvas>
                    <canvas id="board" class="board"></canvas>
                    <canvas id="dragView" style="position:absolute; width:100%;height:600px;"></canvas>
                </div>
            </div>
       
    
        <script type="text/javascript">
            
            var model = createModel();
            
            var timelineCanvasView = new canvascontrols.CanvasView("#timeline");
            var timeline = new canvascontrols.Timeline();
            timelineCanvasView.add(timeline);

            var dragView = new canvascontrols.DragView("#dragView");
            
            var treeCanvasView = new canvascontrols.CanvasView("#tree");
            var tree = new canvascontrols.TimelineTree();
            

            treeCanvasView.add(tree);

            var boardCanvasView = new canvascontrols.CanvasView("#board");
            var board = new canvascontrols.TimelineBoard();
            
            boardCanvasView.add(board);
            setWidths();
            timelineCanvasView.paint();
            treeCanvasView.paint();
            boardCanvasView.paint();

            $(window).resize(function () {
                setWidths();
                timelineCanvasView.paint();
                treeCanvasView.paint();
                boardCanvasView.paint();
            });
            tree.on("nodeRemoved.cc", {}, function (sender, data) {
                
            });

            tree.on("nodeAdded.cc", {}, function (sender, data) {
                board.clear();
                for (var i = 0; i < sender._shapes.length; i++) {
                    var treeNode = sender._shapes[i];
                    var l = treeNode._label;

                    for (var j = 0; j < model.length; j++) {
                        var entry = model[j];
                        var g;
                        if (entry.name == l) {
                            for (var k = 0; k < entry.nodes.length; k++) {
                                g = entry.nodes[k];
                                board.add(new canvascontrols.TimelineBoardNode({ start: g.start, end: g.end, y: treeNode._y, valid : g.valid }));
                            }
                        }
                        
                    }
                }
                
                boardCanvasView.paint();
            });
            tree.on("toggled.cc", {}, function (sender, data) {
                
                board.clear();
                for (var i = 0; i < sender._shapes.length; i++) {
                    var treeNode = sender._shapes[i];
                    var label = treeNode._label;

                    var entry = getEntry(label);
                    if (treeNode._expanded && entryHasChildren(entry)) {

                        for (var j = 0; j < treeNode._shapes.length; j++) {
                            var treeNodeChild = treeNode._shapes[j];

                            for (var k = 0; k < entry.children.length; k++) {
                                var entryChild = entry.children[k];
                                if (entryChild.name == treeNodeChild._label) {

                                    for (var y = 0; y < entryChild.nodes.length; y++) {
                                        var ggg = entryChild.nodes[y];

                                        board.add(new canvascontrols.TimelineBoardNode({ start: new Date(ggg.start.getTime()), end: new Date(ggg.end.getTime()), y: treeNodeChild._y + treeNode._y, valid : ggg.valid }));
                                    }

                                }
                            }

                        }

                    }
                    for (var l = 0; l < entry.nodes.length; l++) {
                        var gg = entry.nodes[l];
                        board.add(new canvascontrols.TimelineBoardNode({ start: new Date(gg.start.getTime()), end: new Date(gg.end.getTime()), y: treeNode._y, height: treeNode._height, valid: gg.valid }));
                    }
                }

                boardCanvasView.paint();
            });
            tree.on("toggled.cc nodeAdded.cc nodeRemoved.cc", {}, function () {
                treeCanvasView.paint();

            });
            
            for (var i = 0; i < model.length; i++ ) {
                var entry = model[i];
                var treeNode = new canvascontrols.TimelineTreeNode({ label: entry.name });
                
                if (entry.children != undefined && entry.children != null && entry.children.length > 0) {
                    for (var j = 0; j < entry.children.length; j++) {
                        var childEntry = entry.children[j];
                        treeNode.add(new canvascontrols.TimelineTreeNode({ label: childEntry.name }));
                    }
                }
                tree.add(treeNode);
            }


            timeline.on("periodChanged.cc", {}, function (sender, data) {
                timelineCanvasView.paint();
                board.setPeriod(data.period);
                boardCanvasView.paint();
            });
            timeline.on("demandRedraw.cc nodeClicked.cc", {}, function (sender, data) {
                timelineCanvasView.paint();
                
                boardCanvasView.paint();
            });
            board.on("mousemove", {}, function (sender, data) {
                timeline._raise("mousemove", data);
                
            });
            board.on("demandRedraw.cc", {}, function (sender, data) {
                boardCanvasView.paint();
            });
            timeline.on("drag.cc", {}, function (sender, data) {
                board.setOffset(data.offset);
                boardCanvasView.paint();
            });
            board.on("nodeClicked.cc", {}, function (sender, data) {
                
            });
            

            function getEntry(label) {
                for (var i = 0; i < model.length; i++) {
                    var e = model[i];
                    if (e.name == label)
                        return e;
                }
                return null;
            }
            function entryHasChildren(e) {
                return e.children != undefined && e.children != null && e.children.length > 0;
            }
            
            function createModel() {
                return [
                    {
                        id: 1, 
                        name : "test",
                        nodes: [
                            {
                                id : 1,
                                start: new Date(2012, 3, 1),
                                end: new Date(2012, 3, 30, 23, 59, 59),
                                valid : true
                            }
                        ],
                            children: [
                               {
                                   id: 100,
                                   name: "child",
                                   nodes: [
                                        {
                                            id: 2,
                                            start: new Date(2012, 6, 1),
                                            end: new Date(2012, 7, 20, 23, 59, 59),
                                            valid : false
                                        }
                                   ]
                               }
                           ]
                    },
                    {
                       id : 2,
                       name : "test2",
                       nodes: [
                           {
                               id : 2,
                               start: new Date(2012, 2, 1),
                               end: new Date(2012, 2, 20, 23, 59, 59),
                               valid : true
                           },   
                           {
                               id: 3,
                               start: new Date(2012, 4, 1),
                               end: new Date(2012, 5, 20, 23, 59, 59),
                               valid : true
                           },
                           {
                               id: 4,
                               start: new Date(2012, 8, 1),
                               end: new Date(2012, 9, 20, 23, 59, 59),
                               valid : false
                           }
                       ],
                           children: [
                               {
                                   id : 100,
                                   name : "child",
                                   nodes: [
                                        {
                                            id: 2,
                                            start: new Date(2012, 6, 1),
                                            end: new Date(2012, 7, 20, 23, 59, 59),
                                            valid : true
                                        }
                                   ]
                               }
                           ]
                       },
                    {
                        id: 3,
                        name: "test3",
                        nodes: [
                           {
                               id: 5,
                               start: new Date(2012, 11, 1),
                               end: new Date(2012, 11, 20, 23, 59, 59)
                           },
                           {
                               id: 6,
                               start: new Date(2012, 4, 3),
                               end: new Date(2012, 5, 10, 23, 59, 59)
                           },
                           {
                               id:7,
                               start: new Date(2012, 8, 5),
                               end: new Date(2012, 9, 15, 23, 59, 59)
                           }
                       ]
                       },
                    {
                        id: 4,
                        name: "test4",
                        nodes: [
                           {
                               id: 8,
                               start: new Date(2012, 2, 1),
                               end: new Date(2012, 2, 20, 23, 59, 59)
                           },
                           {
                               id: 9,
                               start: new Date(2012, 4, 1),
                               end: new Date(2012, 5, 20, 23, 59, 59)
                           },
                           {
                               id: 10,
                               start: new Date(2012, 8, 1),
                               end: new Date(2012, 9, 20, 23, 59, 59)
                           }
                       ]
                    }
                    
                ];
            }
            function setWidths() {
                $("#timeline").css("width", $("#timeline").parent().width() - $("#timeline").position().left);
                $("#board").css("width", $("#board").parent().width() - $("#board").position().left);
            }
        </script>
    </body>
</html>
